export default async function handler(req, res) {
  // CORS headers
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,PATCH,DELETE,POST,PUT');
  res.setHeader('Access-Control-Allow-Headers', 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version');
  
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }
  
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }
  
  try {
    const { data, models } = req.body;
    
    if (!data || !models) {
      return res.status(400).json({ error: 'Invalid request format' });
    }
    
    const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;
    
    if (!OPENROUTER_API_KEY) {
      return res.status(500).json({ error: 'OpenRouter API key not configured' });
    }
    
    // T·∫°o prompt t·ªïng h·ª£p cho t·∫•t c·∫£ th√¥ng tin
    const createCombinedPrompt = (numerologyData) => {
      let prompt = `V·ªõi vai tr√≤ l√† chuy√™n gia th·∫ßn s·ªë h·ªçc c√≥ 20 nƒÉm kinh nghi·ªám, h√£y ph√¢n t√≠ch t·ªïng h·ª£p cho ng∆∞·ªùi c√≥ th√¥ng tin sau:\n\n`;
      
      if (numerologyData.fullName) {
        prompt += `- T√™n ƒë·∫ßy ƒë·ªß: "${numerologyData.fullName.text}" (S·ªë ${numerologyData.fullName.number})\n`;
      }
      if (numerologyData.birthDate) {
        prompt += `- Ng√†y sinh: "${numerologyData.birthDate.text}" (S·ªë ${numerologyData.birthDate.number})\n`;
      }
      if (numerologyData.licensePlate) {
        prompt += `- Bi·ªÉn s·ªë xe: "${numerologyData.licensePlate.text}" (S·ªë ${numerologyData.licensePlate.number})\n`;
      }
      if (numerologyData.phoneNumber) {
        prompt += `- S·ªë ƒëi·ªán tho·∫°i: "${numerologyData.phoneNumber.text}" (S·ªë ${numerologyData.phoneNumber.number})\n`;
      }
      
      prompt += `
\nT√¥i mu·ªën b·∫°n ƒë√≥ng vai m·ªôt chuy√™n gia th·∫ßn s·ªë h·ªçc v·ªõi h∆°n 20 nƒÉm kinh nghi·ªám v√† kh·∫£ nƒÉng di·ªÖn gi·∫£i s√¢u s·∫Øc, r√µ r√†ng, truy·ªÅn c·∫£m h·ª©ng.
H√£y ph√¢n t√≠ch to√†n di·ªán h·ªì s∆° th·∫ßn s·ªë h·ªçc c·ªßa m·ªôt ng∆∞·ªùi d·ª±a tr√™n t√™n ƒë·∫ßy ƒë·ªß v√† ng√†y sinh d∆∞·ªõi ƒë√¢y:


---

üìõ H·ªç t√™n: Ng∆∞·ªùi h·ªèi
üìÖ Ng√†y sinh: ng∆∞·ªùi h·ªèi

H√£y tr√¨nh b√†y c√°c n·ªôi dung sau:

1. T·ªïng quan th·∫ßn s·ªë h·ªçc c√° nh√¢n

Ph√¢n t√≠ch t·ªïng qu√°t nƒÉng l∆∞·ª£ng bao tr√πm con ng∆∞·ªùi n√†y

Nh·ªØng xu h∆∞·ªõng t√¢m linh, nh√¢n sinh, nghi·ªáp l·ª±c n·ªïi b·∫≠t trong ng√†y sinh


2. C√°c con s·ªë ch√≠nh v√† √Ω nghƒ©a t·ª´ng con s·ªë, t·∫°i sao t√≠nh ra s·ªë ƒë√≥
(V·ªõi m·ªói con s·ªë, vui l√≤ng ph√¢n t√≠ch s√¢u c√°c y·∫øu t·ªë sau:
√ù nghƒ©a s√¢u s·∫Øc nh·∫•t
ƒêi·ªÉm m·∫°nh n·ªïi b·∫≠t
Th·ª≠ th√°ch/t·ªïn th∆∞∆°ng th∆∞·ªùng g·∫∑p
B√†i h·ªçc c·∫ßn h·ªçc
Ngh·ªÅ nghi·ªáp/phong c√°ch s·ªëng ph√π h·ª£p
)

‚úÖ Con s·ªë ƒê∆∞·ªùng ƒë·ªùi (Life Path Number) ‚Äì Ph√¢n t√≠ch chi ti·∫øt m·ª•c ƒë√≠ch s·ªëng, b√†i h·ªçc l·ªõn

‚úÖ Con s·ªë Linh h·ªìn (Soul Urge / Heart's Desire) ‚Äì ƒê·ªông l·ª±c s√¢u th·∫≥m, c·∫£m x√∫c b√™n trong

‚úÖ Con s·ªë Bi·ªÉu hi·ªán (Expression Number) ‚Äì T√≠nh c√°ch, t√†i nƒÉng, c√°ch ng∆∞·ªùi kh√°c nh√¨n th·∫•y h·ªç

‚úÖ Con s·ªë Nh√¢n c√°ch (Personality Number) ‚Äì ·∫§n t∆∞·ª£ng ban ƒë·∫ßu v√† h√†nh vi x√£ h·ªôi

‚úÖ Con s·ªë Ng√†y sinh (Birthday Number) ‚Äì Qu√† t·∫∑ng b·∫©m sinh v√† ƒëi·ªÉm m·∫°nh ti·ªÅm ·∫©n

‚úÖ Con s·ªë Tr∆∞·ªüng th√†nh (Maturity Number) ‚Äì T·∫ßm nh√¨n d√†i h·∫°n, giai ƒëo·∫°n sau tu·ªïi 40

‚úÖ Chu k·ª≥ 9 nƒÉm v√† nƒÉm c√° nh√¢n hi·ªán t·∫°i

3. Th√¥ng ƒëi·ªáp t·ªïng h·ª£p

K·∫øt n·ªëi c√°c con s·ªë ch√≠nh ƒë·ªÉ ƒë∆∞a ra th√¥ng ƒëi·ªáp t·ªïng th·ªÉ v·ªÅ h√†nh tr√¨nh t√¢m linh, con ƒë∆∞·ªùng ph√°t tri·ªÉn ph√π h·ª£p v√† ti·ªÅm nƒÉng ph√°t tri·ªÉn cao nh·∫•t.

G·ª£i √Ω ƒë·ªãnh h∆∞·ªõng cu·ªôc s·ªëng, ch·ªØa l√†nh v√† ph√°t tri·ªÉn b·∫£n th√¢n.


üëâ Vi·∫øt theo vƒÉn phong g·∫ßn g≈©i, s√¢u s·∫Øc, truy·ªÅn c·∫£m h·ª©ng ‚Äì c√≥ th·ªÉ d√πng ng√¥i th·ª© hai (‚Äúb·∫°n‚Äù) ƒë·ªÉ k·∫øt n·ªëi tr·ª±c ti·∫øp v·ªõi ng∆∞·ªùi ƒë·ªçc.`;
      
      return prompt;
    };
    
    // G·ªçi API cho t·ª´ng model
    const modelPromises = models.map(async (modelId) => {
      const prompt = createCombinedPrompt(data);
      
      try {
        const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
            'HTTP-Referer': `https://${req.headers.host}`,
            'Content-Type': 'application/json',
            'X-Title': 'Numerology Combined Analysis'
          },
          body: JSON.stringify({
            model: modelId,
            messages: [
              {
                role: 'system',
                content: `B·∫°n l√† chuy√™n gia th·∫ßn s·ªë h·ªçc v·ªõi ki·∫øn th·ª©c s√¢u r·ªông v·ªÅ √Ω nghƒ©a v√† s·ª± t∆∞∆°ng t√°c gi·ªØa c√°c con s·ªë. H√£y ph√¢n t√≠ch t·ªïng h·ª£p m·ªôt c√°ch to√†n di·ªán, k·∫øt n·ªëi c√°c con s·ªë ƒë·ªÉ ƒë∆∞a ra c√°i nh√¨n s√¢u s·∫Øc v·ªÅ con ng∆∞·ªùi. Phong c√°ch ph√¢n t√≠ch ph·ª• thu·ªôc v√†o model:
                - GPT: Ph√¢n t√≠ch logic, c√≥ c·∫•u tr√∫c, khoa h·ªçc
                - Claude: Ph√¢n t√≠ch s√¢u s·∫Øc v·ªÅ c·∫£m x√∫c, t√¢m l√Ω, ƒë·ªìng c·∫£m
                - Gemini: Ph√¢n t√≠ch th·ª±c t·∫ø, d·ªÖ hi·ªÉu, ·ª©ng d·ª•ng cao
                - DeepSeek: Ph√¢n t√≠ch c√¢n b·∫±ng, to√†n di·ªán, k·∫øt h·ª£p logic v√† tr·ª±c gi√°c`
              },
              {
                role: 'user',
                content: prompt
              }
            ],
            temperature: 0.7,
            max_tokens: 9500 // TƒÉng l√™n cho ph√¢n t√≠ch t·ªïng h·ª£p
          })
        });
        
        if (!response.ok) {
          throw new Error(`Model ${modelId} returned ${response.status}`);
        }
        
        const result = await response.json();
        return {
          model: modelId,
          analysis: result.choices[0].message.content
        };
        
      } catch (error) {
        console.error(`Error with model ${modelId}:`, error);
        return {
          model: modelId,
          analysis: `Kh√¥ng th·ªÉ ph√¢n t√≠ch v·ªõi model n√†y. L·ªói: ${error.message}`,
          error: true
        };
      }
    });
    
    const results = await Promise.all(modelPromises);
    
    return res.status(200).json({
      success: true,
      results
    });
    
  } catch (error) {
    console.error('Error:', error);
    return res.status(500).json({ 
      error: 'Internal server error',
      message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.'
    });
  }
}
