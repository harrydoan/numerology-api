export default async function handler(req, res) {
  // CORS headers
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,PATCH,DELETE,POST,PUT');
  res.setHeader('Access-Control-Allow-Headers', 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version');
  
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }
  
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }
  
  try {
    const { data, models } = req.body;
    
    if (!data || !models || !Array.isArray(data) || !Array.isArray(models)) {
      return res.status(400).json({ error: 'Invalid request format' });
    }
    
    const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;
    
    if (!OPENROUTER_API_KEY) {
      return res.status(500).json({ error: 'OpenRouter API key not configured' });
    }
    
    // T·∫°o prompt cho ph√¢n t√≠ch th·∫ßn s·ªë h·ªçc
    const createPrompt = (field, number, text) => {
      return `V·ªõi vai tr√≤ l√† chuy√™n gia th·∫ßn s·ªë h·ªçc c√≥ 20 nƒÉm kinh nghi·ªám, h√£y ph√¢n t√≠ch chi ti·∫øt cho ${field} "${text}" mang con s·ªë ${number}.

T√¥i mu·ªën b·∫°n ƒë√≥ng vai m·ªôt chuy√™n gia th·∫ßn s·ªë h·ªçc v·ªõi h∆°n 20 nƒÉm kinh nghi·ªám v√† kh·∫£ nƒÉng di·ªÖn gi·∫£i s√¢u s·∫Øc, r√µ r√†ng, truy·ªÅn c·∫£m h·ª©ng.
H√£y ph√¢n t√≠ch to√†n di·ªán h·ªì s∆° th·∫ßn s·ªë h·ªçc c·ªßa m·ªôt ng∆∞·ªùi d·ª±a tr√™n t√™n ƒë·∫ßy ƒë·ªß v√† ng√†y sinh d∆∞·ªõi ƒë√¢y:


---

üìõ H·ªç t√™n: ${field} 
üìÖ Ng√†y sinh: ${text}

H√£y tr√¨nh b√†y c√°c n·ªôi dung sau:

1. T·ªïng quan th·∫ßn s·ªë h·ªçc c√° nh√¢n

Ph√¢n t√≠ch t·ªïng qu√°t nƒÉng l∆∞·ª£ng bao tr√πm con ng∆∞·ªùi n√†y

Nh·ªØng xu h∆∞·ªõng t√¢m linh, nh√¢n sinh, nghi·ªáp l·ª±c n·ªïi b·∫≠t trong ng√†y sinh


2. C√°c con s·ªë ch√≠nh v√† √Ω nghƒ©a

‚úÖ Con s·ªë ƒê∆∞·ªùng ƒë·ªùi (Life Path Number) ‚Äì Ph√¢n t√≠ch chi ti·∫øt m·ª•c ƒë√≠ch s·ªëng, b√†i h·ªçc l·ªõn

‚úÖ Con s·ªë Linh h·ªìn (Soul Urge / Heart's Desire) ‚Äì ƒê·ªông l·ª±c s√¢u th·∫≥m, c·∫£m x√∫c b√™n trong

‚úÖ Con s·ªë Bi·ªÉu hi·ªán (Expression Number) ‚Äì T√≠nh c√°ch, t√†i nƒÉng, c√°ch ng∆∞·ªùi kh√°c nh√¨n th·∫•y h·ªç

‚úÖ Con s·ªë Nh√¢n c√°ch (Personality Number) ‚Äì ·∫§n t∆∞·ª£ng ban ƒë·∫ßu v√† h√†nh vi x√£ h·ªôi

‚úÖ Con s·ªë Ng√†y sinh (Birthday Number) ‚Äì Qu√† t·∫∑ng b·∫©m sinh v√† ƒëi·ªÉm m·∫°nh ti·ªÅm ·∫©n

‚úÖ Con s·ªë Tr∆∞·ªüng th√†nh (Maturity Number) ‚Äì T·∫ßm nh√¨n d√†i h·∫°n, giai ƒëo·∫°n sau tu·ªïi 40

‚úÖ Chu k·ª≥ 9 nƒÉm v√† nƒÉm c√° nh√¢n hi·ªán t·∫°i


3. Ph√¢n t√≠ch s√¢u t·ª´ng kh√≠a c·∫°nh

V·ªõi m·ªói con s·ªë, vui l√≤ng ph√¢n t√≠ch c√°c y·∫øu t·ªë sau:

√ù nghƒ©a s√¢u s·∫Øc nh·∫•t

ƒêi·ªÉm m·∫°nh n·ªïi b·∫≠t

Th·ª≠ th√°ch/t·ªïn th∆∞∆°ng th∆∞·ªùng g·∫∑p

B√†i h·ªçc c·∫ßn h·ªçc

Ngh·ªÅ nghi·ªáp/phong c√°ch s·ªëng ph√π h·ª£p


4. Th√¥ng ƒëi·ªáp t·ªïng h·ª£p

K·∫øt n·ªëi c√°c con s·ªë ch√≠nh ƒë·ªÉ ƒë∆∞a ra th√¥ng ƒëi·ªáp t·ªïng th·ªÉ v·ªÅ h√†nh tr√¨nh t√¢m linh, con ƒë∆∞·ªùng ph√°t tri·ªÉn ph√π h·ª£p v√† ti·ªÅm nƒÉng ph√°t tri·ªÉn cao nh·∫•t.

G·ª£i √Ω ƒë·ªãnh h∆∞·ªõng cu·ªôc s·ªëng, ch·ªØa l√†nh v√† ph√°t tri·ªÉn b·∫£n th√¢n.

üëâ Vi·∫øt theo vƒÉn phong g·∫ßn g≈©i, s√¢u s·∫Øc, truy·ªÅn c·∫£m h·ª©ng ‚Äì c√≥ th·ªÉ d√πng ng√¥i th·ª© hai (‚Äúb·∫°n‚Äù) ƒë·ªÉ k·∫øt n·ªëi tr·ª±c ti·∫øp v·ªõi ng∆∞·ªùi ƒë·ªçc.`;
    };
    
    // G·ªçi API cho t·ª´ng model
    const modelPromises = models.map(async (modelId) => {
      const analysisPromises = data.map(async (item) => {
        const prompt = createPrompt(item.field, item.number, item.text);
        
        try {
          const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
              'HTTP-Referer': `https://${req.headers.host}`,
              'Content-Type': 'application/json',
              'X-Title': 'Numerology Multi-Model Analysis'
            },
            body: JSON.stringify({
              model: modelId,
              messages: [
                {
                  role: 'system',
                  content: `B·∫°n l√† chuy√™n gia th·∫ßn s·ªë h·ªçc v·ªõi ki·∫øn th·ª©c s√¢u r·ªông. Phong c√°ch ph√¢n t√≠ch c·ªßa b·∫°n ph·ª• thu·ªôc v√†o model:
                  - GPT: Ph√¢n t√≠ch logic, c√≥ c·∫•u tr√∫c r√µ r√†ng, s√∫c t√≠ch
                  - Claude: Ph√¢n t√≠ch s√¢u s·∫Øc v·ªÅ m·∫∑t c·∫£m x√∫c, chi ti·∫øt v√† ƒë·ªìng c·∫£m
                  - Gemini: Ph√¢n t√≠ch ƒë∆°n gi·∫£n, th·ª±c t·∫ø, d·ªÖ hi·ªÉu
                  - DeepSeek: Ph√¢n t√≠ch to√†n di·ªán, c√¢n b·∫±ng gi·ªØa logic v√† c·∫£m x√∫c`
                },
                {
                  role: 'user',
                  content: prompt
                }
              ],
              temperature: 0.7,
              max_tokens: 800
            })
          });
          
          if (!response.ok) {
            throw new Error(`Model ${modelId} returned ${response.status}`);
          }
          
          const result = await response.json();
          return {
            field: item.field,
            number: item.number,
            analysis: result.choices[0].message.content,
            key: item.key
          };
          
        } catch (error) {
          console.error(`Error with model ${modelId}:`, error);
          return {
            field: item.field,
            number: item.number,
            analysis: `Kh√¥ng th·ªÉ ph√¢n t√≠ch v·ªõi model n√†y. L·ªói: ${error.message}`,
            key: item.key,
            error: true
          };
        }
      });
      
      const analyses = await Promise.all(analysisPromises);
      
      return {
        model: modelId,
        analyses
      };
    });
    
    const results = await Promise.all(modelPromises);
    
    return res.status(200).json({
      success: true,
      results
    });
    
  } catch (error) {
    console.error('Error:', error);
    return res.status(500).json({ 
      error: 'Internal server error',
      message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.'
    });
  }
}
